# SQL Exploratory Data Analysis (EDA) Project

## Overview
This repository contains a comprehensive SQL-based Exploratory Data Analysis (EDA) project focused on analyzing a retail or e-commerce database. The SQL queries explore various dimensions of the dataset, including customers, products, sales, and orders, to uncover key business insights and metrics.

## Project Description
The project leverages SQL queries to perform an in-depth analysis of a database structured with fact and dimension tables (`gold.fact_sales`, `gold.dim_customers`, `gold.dim_products`). The queries are designed to:
- Inspect database schema and structure.
- Analyze customer demographics, product categories, and sales trends.
- Calculate key business metrics such as total sales, average prices, and customer distributions.
- Generate reports for business insights, including revenue by category and customer spending patterns.

## Key Features
- **Schema Exploration**: Queries to retrieve all tables and columns in the database using `INFORMATION_SCHEMA`.
- **Customer Analysis**: Identifies customer demographics, including:
  - Unique countries of customers.
  - Youngest and oldest customers based on birthdates.
  - Customer distribution by country and gender.
- **Product Analysis**: Explores product hierarchies, including:
  - Distinct categories, subcategories, and products.
  - Total products by category and average costs per category.
- **Sales Analysis**: Provides insights into sales performance, such as:
  - Total sales, total items sold, and average selling price.
  - Date range of orders and years of sales data.
  - Total revenue by product category and customer.
- **Order Insights**: Calculates the total number of orders and unique customers who placed orders.
- **Comprehensive Report**: Combines key metrics (total sales, quantity, average price, orders, products, and customers) into a unified report.
- **Geographic Insights**: Analyzes the distribution of sold items across countries.

## Dataset
The database is assumed to follow a star schema with the following tables:
- **`gold.fact_sales`**: Contains sales data (e.g., `sales_amount`, `quantity`, `price`, `order_number`, `order_date`, `customer_key`, `product_key`).
- **`gold.dim_customers`**: Contains customer data (e.g., `customer_key`, `first_name`, `last_name`, `country`, `gender`, `birthdate`).
- **`gold.dim_products`**: Contains product data (e.g., `product_key`, `category`, `subcategory`, `product_name`, `cost`).

## Usage
1. **Prerequisites**: Ensure access to a SQL database (e.g., PostgreSQL, MySQL, SQL Server) with the required schema and data loaded.
2. **Running Queries**: Copy and execute the SQL queries in your preferred SQL client (e.g., pgAdmin, MySQL Workbench, or DBeaver).
3. **Customization**: Modify table names, column names, or schema references (`gold.`) to match your database structure.

## Queries Included
- Schema exploration (`INFORMATION_SCHEMA` queries).
- Customer demographics (country, gender, age).
- Product analysis (categories, subcategories, costs).
- Sales metrics (total sales, quantity, average price, revenue by category/customer).
- Order analysis (first/last order dates, total orders).
- Geographic distribution of sold items.

## License
This project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.


=================================================================================================================
=================================================================================================================




-- Explore All object in the DATABASE

SELECT * FROM INFORMATION_SCHEMA.TABLES;

-- Explore All Columns in the Database

SELECT * FROM INFORMATION_SCHEMA.COLUMNS;

-- Dimensions Exploration
-- Explore All Countries Our customers come from

SELECT DISTINCT country FROM gold.dim_customers;

-- Explore All Categories & subcategories & products

SELECT DISTINCT category, subcategory, product_name FROM gold.dim_products
ORDER BY 1,2,3;

-- Date Exploration
-- Find the date of the first and last order
-- How many years of sales are avaiable

SELECT
    MIN(order_date) AS first_order_date,
    MAX(order_date) AS last_order_date,
    EXTRACT(YEAR FROM AGE(MAX(order_date), MIN(order_date))) AS order_range_years
FROM gold.fact_sales;

-- Find the youngest and the oldest customer

SELECT
    MIN(birthdate) AS oldest_birthdate,
    EXTRACT(YEAR FROM AGE(CURRENT_DATE, MIN(birthdate))) AS oldest_age,
    MAX(birthdate) AS youngest_birthdate,
    EXTRACT(YEAR FROM AGE(CURRENT_DATE, MAX(birthdate))) AS youngest_age
FROM gold.dim_customers;


-- Find the Total sales

SELECT 
	SUM(sales_amount) AS total_sales
FROM gold.fact_sales;

-- Find how many items are sold

SELECT 
	SUM(quantity) AS total_quantity
FROM  gold.fact_sales;

-- Find the avarage selling price

SELECT
	AVG(price) AS avg_price
FROM  gold.fact_sales;

-- Find the total number of orders

SELECT 
	COUNT(DISTINCT order_number) AS total_orders
FROM  gold.fact_sales;


-- Find the total numbers of products

SELECT 
	COUNT(product_name) AS total_products
FROM gold.dim_products;

SELECT 
	COUNT(DISTINCT product_name) AS total_products
FROM gold.dim_products;


-- Find the total number of customers

SELECT 
	COUNT(customer_key) AS total_customers
FROM gold.dim_customers;

-- Find the total number of customers that has placed an order

SELECT 
	COUNT(DISTINCT customer_key) AS total_customers
FROM gold.fact_sales;


-- Generate a Report that shows all key metrics of the business

SELECT 'Total Sales' AS measure_name, SUM(sales_amount) AS measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Total Quantity', SUM(quantity) FROM gold.fact_sales
UNION ALL
SELECT 'Average Price', AVG(price) FROM gold.fact_sales
UNION ALL
SELECT 'Total Orders', COUNT(DISTINCT order_number) FROM gold.fact_sales
UNION ALL
SELECT 'Total Products', COUNT(DISTINCT product_name) FROM gold.dim_products
UNION ALL
SELECT 'Total Customers', COUNT(customer_key) FROM gold.dim_customers;


-- Find total customers by countries

SELECT
    country,
    COUNT(customer_key) AS total_customers
FROM gold.dim_customers
GROUP BY country
ORDER BY total_customers DESC;

-- Find total customers by gender

SELECT
    gender,
    COUNT(customer_key) AS total_customers
FROM gold.dim_customers
GROUP BY gender
ORDER BY total_customers DESC;

-- Find total products by category

SELECT
    category,
    COUNT(product_key) AS total_products
FROM gold.dim_products
GROUP BY category
ORDER BY total_products DESC;

-- Average costs in each category

SELECT
    category,
    AVG(cost) AS avg_cost
FROM gold.dim_products
GROUP BY category
ORDER BY avg_cost DESC;

-- Total revenue generated for each category

SELECT
    p.category,
    SUM(f.sales_amount) AS total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_products p
    ON p.product_key = f.product_key
GROUP BY p.category
ORDER BY total_revenue DESC;


-- Total revenue generated by each customer

SELECT
    c.customer_key,
    c.first_name,
    c.last_name,
    SUM(f.sales_amount) AS total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
    ON c.customer_key = f.customer_key
GROUP BY 
    c.customer_key,
    c.first_name,
    c.last_name
ORDER BY total_revenue DESC;

-- The distribution of sold items across countries

SELECT
    c.country,
    SUM(f.quantity) AS total_sold_items
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
    ON c.customer_key = f.customer_key
GROUP BY c.country
ORDER BY total_sold_items DESC;
